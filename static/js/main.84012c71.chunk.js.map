{"version":3,"sources":["components/Blog/Blog.module.css","components/Header/Header.module.css","components/Bio/Bio.module.css","ui/Separator/Separator.module.css","components/Content/Content.module.css","components/Header/index.js","ui/Separator/index.js","components/Bio/index.js","actions/index.js","components/Blog/index.js","components/Blog/BlogContainer.js","components/Content/index.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Blog","blogHeader","blogBody","blogNavigation","blogPost","Header","headerWrapper","navbar","navbarItem","Bio","headshot","socialIconsContainer","Separator","Content","links","displayTitle","url","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getNavLinks","map","e","i","react_default","a","createElement","react_router_dom","key","to","className","style","inherits","createClass","value","Component","src","alt","href","target","rel","Separator_Separator","FETCH_POST_BEGIN","FETCH_POST_FAILURE","FETCH_POST_SUCCESS","FETCH_ALL_POSTS_BEGIN","FETCH_ALL_POSTS_FAILURE","FETCH_ALL_POSTS_SUCCESS","SET_ACTIVE_VIEW","fetchPost","postId","dispatch","type","fetch","then","response","json","body","_ref","ok","payload","post","error","fetchLatestPost","_ref3","latestPost","window","location","id","getLatestPost","props","Fragment","data","showdown","Converter","makeHtml","date","Date","datePosted","title","toLocaleDateString","dangerouslySetInnerHTML","__html","isLoading","BlogContainer","match","params","isFetching","parseInt","Blog_Blog","connect","state","react_router","exact","path","component","App","components_Header","Content_Content","React","Boolean","hostname","initialState","activeView","store","createStore","undefined","action","objectSpread","viewName","allBlogPosts","posts","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84012c71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blog\":\"Blog_Blog__3BWLL\",\"blogHeader\":\"Blog_blogHeader__V0Epg\",\"blogBody\":\"Blog_blogBody__JCL9E\",\"blogNavigation\":\"Blog_blogNavigation__2u76D\",\"blogPost\":\"Blog_blogPost__198JK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"headerWrapper\":\"Header_headerWrapper__1oKyh\",\"navbar\":\"Header_navbar__3zH7f\",\"navbarItem\":\"Header_navbarItem__1xoHB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1PUm3\",\"headshot\":\"Bio_headshot__12JAn\",\"socialIconsContainer\":\"Bio_socialIconsContainer__3HvJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Separator\":\"Separator_Separator__34klP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Content_Content__hDgPc\"};","import React, { Component } from 'react'\n\nimport { NavLink } from 'react-router-dom'\n\nimport style from './Header.module.css'\n\nconst links = [\n    { displayTitle: 'Home', url: '/' },\n    { displayTitle: 'Blog', url: '/blog' },\n]\n\nexport class Header extends Component {\n    getNavLinks = () => (\n        links.map((e, i) => (\n            <NavLink key={i} to={e.url}>\n                <div className={style.navbarItem}>{e.displayTitle}</div>\n            </NavLink>\n        ))\n    )\n    render() {\n        return (\n            <div className={style.headerWrapper}>\n                <div className={style.Header}>\n                    <div><h2>Derek Rogers</h2></div>\n                    <div className={style.navbar}>\n                        {this.getNavLinks()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react'\n\nimport style from './Separator.module.css'\n\nexport default class Separator extends Component {\n    render() {\n        return (\n            <div className={style.Separator}/>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport Separator from '../../ui/Separator'\n\nimport style from './Bio.module.css'\n\nexport default class Bio extends Component {\n    render() {\n        return (\n            <div className={style.Bio}>\n                <div className={style.headshot}>\n                    <img src='./headshot.jpg' alt='Derek Rogers' />\n                </div>\n                <h1>Hi, I'm Derek.</h1>\n                <div className={style.socialIconsContainer}>\n                    <a href='https://github.com/derek-rogers' target='_blank' rel='noopener noreferrer'><img src='./github-brands.svg' alt='Github Link' /></a>\n                    <a href='https://www.linkedin.com/in/derekjrogers/' target='_blank' rel='noopener noreferrer'><img src='./linkedin-brands.svg' alt='LinkedIn Link' /></a>\n                    <a href='https://twitter.com/derek_j_rogers' target='_blank' rel='noopener noreferrer'><img src='./twitter-brands.svg' alt='Twitter Link' /></a>\n                </div>\n                <Separator />\n                <h3>\n                    I believe anyone, at any level, can improve a process if they are\n                    willing to critically investigate potential problems and design creative solutions.\n                </h3>\n            </div>\n        )\n    }\n}\n","export const FETCH_POST_BEGIN = 'FETCH_POST_BEGIN'\nexport const FETCH_POST_FAILURE = 'FETCH_POST_FAILURE'\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS'\n\nexport const FETCH_ALL_POSTS_BEGIN = 'FETCH_ALL_POSTS_BEGIN'\nexport const FETCH_ALL_POSTS_FAILURE = 'FETCH_ALL_POSTS_FAILURE'\nexport const FETCH_ALL_POSTS_SUCCESS = 'FETCH_ALL_POSTS_SUCCESS'\n\nexport const SET_ACTIVE_VIEW = 'SET_ACTIVE_VIEW'\n\nexport const fetchPost = postId => {\n    return dispatch => {\n        dispatch({ type: FETCH_POST_BEGIN })\n\n        return fetch(`https://fathomless-gorge-17177.herokuapp.com/posts/${postId}`)\n            .then(response => response.json().then(body => ({ response, body })))\n            .then(({ response, body }) => {\n                if (!response.ok) {\n                    dispatch({\n                        type: FETCH_POST_FAILURE,\n                        payload: {\n                            error: body.error\n                        }\n                    })\n                } else {\n                    dispatch({\n                        type: FETCH_POST_SUCCESS,\n                        payload: {\n                            post: body\n                        }\n                    })\n                }\n            });\n    }\n}\n\nexport const fetchAllPosts = () => {\n    return dispatch => {\n        dispatch({type: FETCH_ALL_POSTS_BEGIN})\n\n        return fetch('https://fathomless-gorge-17177.herokuapp.com/posts')\n        .then(response => response.json().then(body => ({response, body})))\n        .then(({response, body}) => {\n            if(!response.ok){\n                dispatch({\n                    type: FETCH_ALL_POSTS_FAILURE,\n                    payload: {\n                        error: body.error\n                    }\n                })\n            } else {\n                dispatch({\n                    type: FETCH_ALL_POSTS_SUCCESS,\n                    payload: {\n                        posts: body\n                    }\n                })\n            }\n        })\n    }\n}\n\nexport const fetchLatestPost = () => {\n    return dispatch => {\n        dispatch({type: FETCH_POST_BEGIN})\n\n        return fetch('https://fathomless-gorge-17177.herokuapp.com/posts')\n        .then(response => response.json().then(body => ({response, body})))\n        .then(({response, body}) => {\n            if(!response.ok){\n                dispatch({\n                    type: FETCH_POST_FAILURE,\n                    payload: {\n                        error: body.error\n                    }\n                })\n            } else {\n                let latestPost = body[body.length-1]\n                window.location = `/#/blog/${latestPost.id}`\n                dispatch({\n                    type: FETCH_POST_SUCCESS,\n                    payload: {\n                        post: latestPost\n                    }\n                })\n            }\n        })\n    }\n}\n\nexport const setActiveView = viewName => (\n    {\n        type: SET_ACTIVE_VIEW,\n        payload: viewName\n    }\n)\n\n","import React, { Component } from 'react'\nimport showdown from 'showdown'\n\nimport { NavLink } from 'react-router-dom'\n\nimport Separator from '../../ui/Separator'\n\nimport style from './Blog.module.css'\n\nexport default class Blog extends Component {\n\n    getLatestPost = () => {\n        if (!this.props.blogPost || this.props.blogPost.error) {\n            return <React.Fragment></React.Fragment>\n        }\n\n        let latestPost = this.props.blogPost.data\n        let converter = new showdown.Converter()\n        let body = converter.makeHtml(latestPost.body)\n        let date = new Date(latestPost.datePosted)\n        return (\n            <div className={style.blogPost}>\n                <h1>{latestPost.title}</h1>\n                <h5>{date.toLocaleDateString()}</h5>\n                <div className={style.blogBody} dangerouslySetInnerHTML={{ __html: body }}></div>\n            </div>\n        )\n    }\n\n    render() {\n\n        return (<div className={style.Blog}>\n            <div className={style.blogHeader}>\n                <h1>Blog</h1>\n                <div className={style.blogNavigation}>\n                    <NavLink to={`/blog/${this.props.blogPost ? this.props.blogPost.data.id - 1 : ''}`}><img src='/arrow-left-solid.svg' alt='Left Arrow' /></NavLink>\n                    <NavLink to={`/blog/${this.props.blogPost ? this.props.blogPost.data.id + 1 : ''}`}><img src='/arrow-right-solid.svg' alt='Right Arrow' /></NavLink>\n                </div>\n                <Separator />\n            </div>\n            {!this.props.blogPost.isLoading && this.getLatestPost()}\n        </div>)\n\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchPost, fetchLatestPost } from '../../actions'\nimport Blog from './'\n\nclass BlogContainer extends Component {\n\n    componentDidMount() {\n        if (this.props.match.params && this.props.match.params.id) {\n            this.props.fetchPost(this.props.match.params.id)\n        } else {\n            this.props.fetchLatestPost()\n        }\n    }\n\n    componentDidUpdate(){\n        if(this.props.blogPost.error){  \n            if(!this.props.blogPost.isFetching){\n                this.props.fetchLatestPost()\n            }\n            return\n        }\n\n        if(this.props.match.params && this.props.match.params.id){\n            \n            if(this.props.blogPost.isFetching){\n                return;\n            }\n\n            if(parseInt(this.props.match.params.id) !== this.props.blogPost.data.id){\n                this.props.fetchPost(this.props.match.params.id)\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Blog blogPost={this.props.blogPost} />\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        blogPost: state.blogPost\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchPost: (id) => {\n            dispatch(fetchPost(id))\n        },\n        fetchLatestPost: () => {\n            dispatch(fetchLatestPost())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogContainer)","import React, { Component } from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nimport Bio from '../Bio';\nimport BlogContainer from '../Blog/BlogContainer';\n\nimport style from './Content.module.css'\n\n\nexport default class Content extends Component {\n\n    render() {\n        return (\n            <div className={style.Content}>\n                <Route exact path=\"/\" component={Bio} />\n                <Route exact path='/blog/all' component={Bio} />\n                <Route exact path=\"/blog/:id?\" component={BlogContainer} />\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport Content from './components/Content'\n\nimport './App.css'\n\nclass App extends React.Component {\n\n  render() {\n    return (<Router>\n      <div className=\"App\">\n        <Header />\n        <Content />\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    FETCH_POST_BEGIN,\n    FETCH_POST_SUCCESS,\n    FETCH_POST_FAILURE,\n    FETCH_ALL_POSTS_BEGIN,\n    FETCH_ALL_POSTS_FAILURE,\n    FETCH_ALL_POSTS_SUCCESS,\n    SET_ACTIVE_VIEW\n} from '../actions'\n\nconst initialState = {\n    activeView: 'home',\n    blogPost: {\n        isFetching: false,\n        data: {},\n        error: null\n    }\n}\n\nexport default function reducers(state = initialState, action) {\n    switch (action.type) {\n        case SET_ACTIVE_VIEW: {\n            return {\n                ...state,\n                activeView: action.payload.viewName\n            }\n        }\n\n        case FETCH_POST_BEGIN: {\n            return {\n                ...state,\n                blogPost: {\n                    ...state.blogPost,\n                    isFetching: true,\n                }\n            }\n        }\n\n        case FETCH_POST_FAILURE: {\n            return {\n                ...state,\n                blogPost: {\n                    ...state.blogPost,\n                    isFetching: false,\n                    error: action.payload.error\n                }\n            }\n        }\n\n        case FETCH_POST_SUCCESS: {\n            return {\n                ...state,\n                blogPost: {\n                    ...state.blogPost,\n                    isFetching: false,\n                    error: null,\n                    data: action.payload.post\n                }\n            }\n        }\n\n        case FETCH_ALL_POSTS_BEGIN: {\n            return {\n                ...state,\n                allBlogPosts: {\n                    ...state.allBlogPosts,\n                    isFetching: true\n                }\n            }\n        }\n\n        case FETCH_ALL_POSTS_FAILURE: {\n            return {\n                ...state,\n                allBlogPosts: {\n                    ...state.allBlogPosts,\n                    isFetching: false,\n                    error: action.payload.error\n                }\n            }\n        }\n\n        case FETCH_ALL_POSTS_SUCCESS: {\n            return {\n                ...state,\n                allBlogPosts: {\n                    ...state.allBlogPosts,\n                    isFetching: false,\n                    error: null,\n                    data: action.payload.posts\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}